{
  "address": "0x1328254030F8fB2d35DC3C9c171643fAf5B67389",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coreControllerImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sigmaControllerImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coreIndexPoolImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sigmaPoolImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_polygonRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bal",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cc10",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cc10Seller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defi5",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drainAndRepair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb7efeaa71a45d052015f879e2f79564139a5eb84e249188a885d6f84b0bd265",
  "receipt": {
    "to": null,
    "from": "0x236ECcAB8cdcfEDb099dE85c4060024bA3cE4d46",
    "contractAddress": "0x1328254030F8fB2d35DC3C9c171643fAf5B67389",
    "transactionIndex": 141,
    "gasUsed": "1563973",
    "logsBloom": "0x
    "blockHash": "0x167ad69652357d8f01f550800af90f6d39dde5d60ec5ba57db3c2448633b5733",
    "transactionHash": "0xeb7efeaa71a45d052015f879e2f79564139a5eb84e249188a885d6f84b0bd265",
    "logs": [],
    "blockNumber": 13670234,
    "cumulativeGasUsed": "14524014",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78b4f45B4A2Afa333C7Be1dbc7F2c9F056615327",
    "0x4561784841DE5335922a9ad3E44aba69a162bA7A",
    "0x669693A42B58E87b9e568bA2C6AdD607eb298d95",
    "0x7B3B2B39CbdBddaDC13D8559D82c054b9C2fd5f3",
    "0xa7204780ED47146a0e626D533e5fc14a5BeDA0f0"
  ],
  "solcInputHash": "49f5e5766fe061a376b15bf0e33acf4b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreControllerImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigmaControllerImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreIndexPoolImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigmaPoolImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polygonRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc10\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc10Seller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defi5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainAndRepair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"If the sender is FFF and the receiver is DEGEN, delegate to the real sigma pool implementation to read the balance; otherwise, return the value stored at the balance slot for `account`.\"},\"cc10()\":{\"details\":\"Transfer the assets in CC10 and its Uniswap pair's WETH to the treasury.\"},\"cc10Seller()\":{\"details\":\"Transfer the assets in the CC10 token seller to the treasury.\"},\"defi5()\":{\"details\":\"Transfer the assets in DEFI5 and its Uniswap pair's WETH to the treasury.\"},\"fff()\":{\"details\":\"Transfer the assets in FFF and its Uniswap pair's WETH to the treasury.\"},\"transfer(address,uint256)\":{\"details\":\"Enable transfers when the sender is FFF and the receiver is DEGEN. This allows DEGEN to be removed from FFF even while the implementation contract for Sigma pools is set to the recovery contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Enables fake deposits to Polygon. Accepts the transferFrom call only if the current contract is DEFI5, CC10 or FFF, the caller is the polygon erc20 predicate, the sender is the recovery contract, the receiver is the polygon erc20 predicate and the amount is 2**128-1.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IndexPoolRecovery.sol\":\"IndexPoolRecovery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"contracts/IndexPoolRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport './lib/UniswapV2Library.sol';\\nimport './lib/TransferHelper.sol';\\nimport './interfaces/IProxyManagerAccessControl.sol';\\nimport './interfaces/IDelegateCallProxyManager.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IRootChainManager.sol';\\n\\ncontract IndexPoolRecovery {\\n  uint256 internal constant sideChainDepositAmount = type(uint128).max;\\n  address internal constant treasury = 0x78a3eF33cF033381FEB43ba4212f2Af5A5A0a2EA;\\n  IProxyManagerAccessControl internal constant proxyManagerController =\\n    IProxyManagerAccessControl(0x3D4860d4b7952A3CAD3Accfada61463F15fc0D54);\\n  IDelegateCallProxyManager internal constant proxyManager =\\n    IDelegateCallProxyManager(0xD23DeDC599bD56767e42D48484d6Ca96ab01C115);\\n  IRootChainManager internal constant polygonRootChainManager =\\n    IRootChainManager(0xA0c68C638235ee32657e8f720a23ceC1bFc77C77);\\n  address internal constant polygonERC20Predicate = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\\n  address internal immutable polygonRecipient;\\n\\n  address internal constant DEFI5 = 0xfa6de2697D59E88Ed7Fc4dFE5A33daC43565ea41;\\n  address internal constant CC10 = 0x17aC188e09A7890a1844E5E65471fE8b0CcFadF3;\\n  address internal constant CC10_SELLER = 0xE487F6E45D292BF8D9B883d007d93714f4bFE148;\\n  address internal constant FFF = 0xaBAfA52D3d5A2c18A4C1Ae24480D22B831fC0413;\\n  address internal constant DEGEN = 0x126c121f99e1E211dF2e5f8De2d96Fa36647c855;\\n\\n  address internal immutable recoveryContract;\\n  bytes32 internal constant slot = bytes32(uint256(keccak256('indexed.recovery.module')) - 1);\\n  address internal immutable corePoolImplementation;\\n  bytes32 internal constant corePoolImplementationID = keccak256('IndexPool.sol');\\n  address internal immutable coreSellerImplementation;\\n  bytes32 internal constant coreSellerImplementationID = keccak256('UnboundTokenSeller.sol');\\n  address internal immutable sigmaPoolImplementation;\\n  bytes32 internal constant sigmaPoolImplementationID = keccak256('SigmaIndexPoolV1.sol');\\n  address internal immutable coreControllerImplementation;\\n  address internal constant coreControllerAddress = 0xF00A38376C8668fC1f3Cd3dAeef42E0E44A7Fcdb;\\n  address internal immutable sigmaControllerImplementation;\\n  address internal constant sigmaControllerAddress = 0x5B470A8C134D397466A1a603678DadDa678CBC29;\\n\\n  function getImplementationAddress(bytes32 implementationID) internal view returns (address implementation) {\\n    address holder = proxyManager.getImplementationHolder(implementationID);\\n    (bool success, bytes memory data) = holder.staticcall('');\\n    require(success, string(data));\\n    implementation = abi.decode((data), (address));\\n    require(implementation != address(0), 'ERR_NULL_IMPLEMENTATION');\\n  }\\n\\n  constructor(\\n    address _coreControllerImplementation,\\n    address _sigmaControllerImplementation,\\n    address _coreIndexPoolImplementation,\\n    address _sigmaPoolImplementation,\\n    address _polygonRecipient\\n  ) public {\\n    coreControllerImplementation = _coreControllerImplementation;\\n    sigmaControllerImplementation = _sigmaControllerImplementation;\\n    corePoolImplementation = _coreIndexPoolImplementation;\\n    sigmaPoolImplementation = _sigmaPoolImplementation;\\n    coreSellerImplementation = getImplementationAddress(coreSellerImplementationID);\\n    recoveryContract = address(this);\\n    polygonRecipient = _polygonRecipient;\\n  }\\n\\n  /**\\n   * @dev Enables fake deposits to Polygon.\\n   * Accepts the transferFrom call only if the current contract is\\n   * DEFI5, CC10 or FFF, the caller is the polygon erc20 predicate,\\n   * the sender is the recovery contract, the receiver is the polygon\\n   * erc20 predicate and the amount is 2**128-1.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external view returns (bool) {\\n    require(\\n      (\\n        address(this) == DEFI5 ||\\n        address(this) == CC10 ||\\n        address(this) == FFF\\n      ) &&\\n      msg.sender == polygonERC20Predicate &&\\n      from == recoveryContract &&\\n      to == polygonERC20Predicate &&\\n      amount == sideChainDepositAmount\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Enable transfers when the sender is FFF and the receiver is DEGEN.\\n   * This allows DEGEN to be removed from FFF even while the implementation contract\\n   * for Sigma pools is set to the recovery contract.\\n   */\\n  function transfer(address to, uint256 amount) external onlyFromTo(FFF, DEGEN) returns (bool) {\\n    _delegate(sigmaPoolImplementation);\\n  }\\n\\n  /**\\n   * @dev If the sender is FFF and the receiver is DEGEN, delegate\\n   * to the real sigma pool implementation to read the balance;\\n   * otherwise, return the value stored at the balance slot for `account`.\\n   */\\n  function balanceOf(address account) external returns (uint256 bal) {\\n    if (msg.sender == FFF && address(this) == DEGEN) {\\n      _delegate(sigmaPoolImplementation);\\n    }\\n    uint256 balslot = balanceSlot(account);\\n    assembly {\\n      bal := sload(balslot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegate to an implementation contract.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n        // delegatecall returns 0 on error.\\n        case 0 {\\n          revert(0, returndatasize())\\n        }\\n        default {\\n          return(0, returndatasize())\\n        }\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculates the slot for temporary balance storage.\\n   */\\n  function balanceSlot(address account) internal pure returns (uint256 _slot) {\\n    _slot = uint256(keccak256(abi.encodePacked(slot, keccak256(abi.encodePacked(account))))) - 1;\\n  }\\n\\n  /**\\n   * @dev Temporarily set a balance value at the balance slot for an account.\\n   * This is used for draining Uniswap pairs.\\n   */\\n  function setContractBal(address account, uint256 bal) internal {\\n    uint256 balslot = balanceSlot(account);\\n    assembly {\\n      sstore(balslot, bal)\\n    }\\n  }\\n\\n  function calculateUniswapPair(\\n    address token0,\\n    address token1\\n  ) internal pure returns (address pair) {\\n    pair = address(\\n      uint256(\\n        keccak256(\\n          abi.encodePacked(\\n            hex'ff',\\n            0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n\\n  /**\\n   * @dev Transfer the full balance held by this contract of a token to the treasury.\\n   */\\n  function claimToken(IERC20 token) internal {\\n    uint256 bal = token.balanceOf(address(this));\\n    if (bal > 0) TransferHelper.safeTransfer(address(token), treasury, bal);\\n  }\\n\\n  /**\\n   * @dev Transfer all but 1 wei of the paired token from a Uniswap pair\\n   * to the treasury.\\n   */\\n  function claimLiquidity(address pairedToken) internal {\\n    (address token0, address token1) =\\n      address(this) < pairedToken ? (address(this), pairedToken) : (pairedToken, address(this));\\n    address pair = calculateUniswapPair(token0, token1);\\n    uint256 pairedReserves = IERC20(pairedToken).balanceOf(pair);\\n    setContractBal(pair, 1);\\n    IUniswapV2Pair(pair).sync();\\n    uint256 amountIn = UniswapV2Library.getAmountIn(pairedReserves - 1, 1, pairedReserves);\\n    setContractBal(pair, amountIn + 1);\\n    if (token0 == address(this)) {\\n      IUniswapV2Pair(pair).swap(0, pairedReserves - 1, treasury, '');\\n    } else {\\n      IUniswapV2Pair(pair).swap(pairedReserves - 1, 0, treasury, '');\\n    }\\n    setContractBal(pair, 0);\\n  }\\n\\n  modifier onlyFromTo(address _caller, address _contract) {\\n    require(msg.sender == _caller && address(this) == _contract);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Transfer the assets in DEFI5 and its Uniswap pair's WETH to the treasury.\\n   */\\n  function defi5() external onlyFromTo(recoveryContract, DEFI5) {\\n    claimToken(IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2)); // sushi\\n    claimToken(IERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984)); // uni\\n    claimToken(IERC20(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9)); // aave\\n    claimToken(IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52)); // crv\\n    claimToken(IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888)); // comp\\n    claimToken(IERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2)); // mkr\\n    claimToken(IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F)); // snx\\n    claimLiquidity(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address _treasury = treasury;\\n    assembly {\\n      selfdestruct(_treasury)\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer the assets in CC10 and its Uniswap pair's WETH to the treasury.\\n   */\\n  function cc10() external onlyFromTo(recoveryContract, CC10) {\\n    claimToken(IERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07)); // omg\\n    claimToken(IERC20(0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828)); // uma\\n    claimToken(IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF)); // bat\\n    claimToken(IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888)); // comp\\n    claimToken(IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2)); // sushi\\n    claimToken(IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52)); // crv\\n    claimToken(IERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2)); // mkr\\n    claimToken(IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F)); // snx\\n    claimToken(IERC20(0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e)); // yfi\\n    claimToken(IERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984)); // uni\\n    claimLiquidity(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address _treasury = treasury;\\n    assembly {\\n      selfdestruct(_treasury)\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer the assets in FFF and its Uniswap pair's WETH to the treasury.\\n   */\\n  function fff() external onlyFromTo(recoveryContract, FFF) {\\n    claimToken(IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)); // weth\\n    claimToken(IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)); // wbtc\\n    claimToken(IERC20(DEGEN)); // degen\\n    claimLiquidity(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address _treasury = treasury;\\n    assembly {\\n      selfdestruct(_treasury)\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer the assets in the CC10 token seller to the treasury.\\n   */\\n  function cc10Seller() external onlyFromTo(recoveryContract, CC10_SELLER) {\\n    claimToken(IERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07));\\n    claimToken(IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498));\\n    address _treasury = treasury;\\n    assembly {\\n      selfdestruct(_treasury)\\n    }\\n  }\\n\\n  /**\\n   * @dev Execute a deposit to Polygon.\\n   */\\n  function sendToPolygon() internal {\\n    bytes memory encodedAmount = abi.encode(sideChainDepositAmount);\\n\\n    polygonRootChainManager.depositFor(polygonRecipient, DEFI5, encodedAmount);\\n    polygonRootChainManager.depositFor(polygonRecipient, CC10, encodedAmount);\\n    polygonRootChainManager.depositFor(polygonRecipient, FFF, encodedAmount);\\n  }\\n\\n  function drainAndRepair() external onlyFromTo(treasury, recoveryContract) {\\n    proxyManagerController.setImplementationAddressManyToOne(corePoolImplementationID, address(this));\\n    proxyManagerController.setImplementationAddressManyToOne(coreSellerImplementationID, address(this));\\n    proxyManagerController.setImplementationAddressManyToOne(sigmaPoolImplementationID, address(this));\\n    sendToPolygon();\\n    IndexPoolRecovery(FFF).fff();\\n    IndexPoolRecovery(DEFI5).defi5();\\n    IndexPoolRecovery(CC10).cc10();\\n    IndexPoolRecovery(CC10_SELLER).cc10Seller();\\n\\n    proxyManagerController.setImplementationAddressManyToOne(corePoolImplementationID, corePoolImplementation);\\n    proxyManagerController.setImplementationAddressManyToOne(coreSellerImplementationID, coreSellerImplementation);\\n    proxyManagerController.setImplementationAddressManyToOne(sigmaPoolImplementationID, sigmaPoolImplementation);\\n    proxyManagerController.setImplementationAddressOneToOne(coreControllerAddress, coreControllerImplementation);\\n    proxyManagerController.setImplementationAddressOneToOne(sigmaControllerAddress, sigmaControllerImplementation);\\n\\n    proxyManagerController.transferOwnership(treasury);\\n  }\\n}\\n\",\"keccak256\":\"0xe986c0f07cf3004d65564462306df05b349af28f224f4fd6527e3ab1431081e8\",\"license\":\"MIT\"},\"contracts/interfaces/IDelegateCallProxyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\n/**\\n * @dev Contract that manages deployment and upgrades of delegatecall proxies.\\n *\\n * An implementation identifier can be created on the proxy manager which is\\n * used to specify the logic address for a particular contract type, and to\\n * upgrade the implementation as needed.\\n *\\n * A one-to-one proxy is a single proxy contract with an upgradeable implementation\\n * address.\\n *\\n * A many-to-one proxy is a single upgradeable implementation address that may be\\n * used by many proxy contracts.\\n */\\ninterface IDelegateCallProxyManager {\\n/* ==========  Events  ========== */\\n\\n  event DeploymentApprovalGranted(address deployer);\\n  event DeploymentApprovalRevoked(address deployer);\\n\\n  event ManyToOne_ImplementationCreated(\\n    bytes32 implementationID,\\n    address implementationAddress\\n  );\\n\\n  event ManyToOne_ImplementationUpdated(\\n    bytes32 implementationID,\\n    address implementationAddress\\n  );\\n\\n  event ManyToOne_ProxyDeployed(\\n    bytes32 implementationID,\\n    address proxyAddress\\n  );\\n\\n  event OneToOne_ProxyDeployed(\\n    address proxyAddress,\\n    address implementationAddress\\n  );\\n\\n  event OneToOne_ImplementationUpdated(\\n    address proxyAddress,\\n    address implementationAddress\\n  );\\n\\n/* ==========  Controls  ========== */\\n\\n  /**\\n   * @dev Allows `deployer` to deploy many-to-one proxies.\\n   */\\n  function approveDeployer(address deployer) external;\\n\\n  /**\\n   * @dev Prevents `deployer` from deploying many-to-one proxies.\\n   */\\n  function revokeDeployerApproval(address deployer) external;\\n\\n/* ==========  Implementation Management  ========== */\\n\\n  /**\\n   * @dev Creates a many-to-one proxy relationship.\\n   *\\n   * Deploys an implementation holder contract which stores the\\n   * implementation address for many proxies. The implementation\\n   * address can be updated on the holder to change the runtime\\n   * code used by all its proxies.\\n   *\\n   * @param implementationID ID for the implementation, used to identify the\\n   * proxies that use it. Also used as the salt in the create2 call when\\n   * deploying the implementation holder contract.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function createManyToOneProxyRelationship(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationManyToOne(bytes32 implementationID) external;\\n\\n  /**\\n   * @dev Lock the current implementation for `proxyAddress` so that it can never be upgraded again.\\n   */\\n  function lockImplementationOneToOne(address proxyAddress) external;\\n\\n  /**\\n   * @dev Updates the implementation address for a many-to-one\\n   * proxy relationship.\\n   *\\n   * @param implementationID Identifier for the implementation.\\n   * @param implementation Address with the runtime code the proxies\\n   * should use.\\n   */\\n  function setImplementationAddressManyToOne(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  /**\\n   * @dev Updates the implementation address for a one-to-one proxy.\\n   *\\n   * Note: This could work for many-to-one as well if the caller\\n   * provides the implementation holder address in place of the\\n   * proxy address, as they use the same access control and update\\n   * mechanism.\\n   *\\n   * @param proxyAddress Address of the deployed proxy\\n   * @param implementation Address with the runtime code for\\n   * the proxy to use.\\n   */\\n  function setImplementationAddressOneToOne(\\n    address proxyAddress,\\n    address implementation\\n  ) external;\\n\\n/* ==========  Proxy Deployment  ========== */\\n\\n  /**\\n   * @dev Deploy a proxy contract with a one-to-one relationship\\n   * with its implementation.\\n   *\\n   * The proxy will have its own implementation address which can\\n   * be updated by the proxy manager.\\n   *\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   * @param implementation Address of the contract with the runtime\\n   * code that the proxy should use.\\n   */\\n  function deployProxyOneToOne(\\n    bytes32 suppliedSalt,\\n    address implementation\\n  ) external returns(address proxyAddress);\\n\\n  /**\\n   * @dev Deploy a proxy with a many-to-one relationship with its implemenation.\\n   *\\n   * The proxy will call the implementation holder for every transaction to\\n   * determine the address to use in calls.\\n   *\\n   * @param implementationID Identifier for the proxy's implementation.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   */\\n  function deployProxyManyToOne(\\n    bytes32 implementationID,\\n    bytes32 suppliedSalt\\n  ) external returns(address proxyAddress);\\n\\n/* ==========  Queries  ========== */\\n\\n  /**\\n   * @dev Returns a boolean stating whether `implementationID` is locked.\\n   */\\n  function isImplementationLocked(bytes32 implementationID) external view returns (bool);\\n\\n  /**\\n   * @dev Returns a boolean stating whether `proxyAddress` is locked.\\n   */\\n  function isImplementationLocked(address proxyAddress) external view returns (bool);\\n\\n  /**\\n   * @dev Returns a boolean stating whether `deployer` is allowed to deploy many-to-one\\n   * proxies.\\n   */\\n  function isApprovedDeployer(address deployer) external view returns (bool);\\n\\n  /**\\n   * @dev Queries the temporary storage value `_implementationHolder`.\\n   * This is used in the constructor of the many-to-one proxy contract\\n   * so that the create2 address is static (adding constructor arguments\\n   * would change the codehash) and the implementation holder can be\\n   * stored as a constant.\\n   */\\n  function getImplementationHolder() external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the implementation holder contract\\n   * for `implementationID`.\\n   */\\n  function getImplementationHolder(bytes32 implementationID) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address for a one-to-one proxy requested\\n   * by `originator` using `suppliedSalt`.\\n   *\\n   * @param originator Address of the account requesting deployment.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n   */\\n  function computeProxyAddressOneToOne(\\n    address originator,\\n    bytes32 suppliedSalt\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address for a many-to-one proxy for the\\n   * implementation `implementationID` requested by `originator` using\\n   * `suppliedSalt`.\\n   *\\n   * @param originator Address of the account requesting deployment.\\n   * @param implementationID The identifier for the contract implementation.\\n   * @param suppliedSalt Salt provided by the account requesting deployment.\\n  */\\n  function computeProxyAddressManyToOne(\\n    address originator,\\n    bytes32 implementationID,\\n    bytes32 suppliedSalt\\n  ) external view returns (address);\\n\\n  /**\\n   * @dev Computes the create2 address of the implementation holder\\n   * for `implementationID`.\\n   *\\n   * @param implementationID The identifier for the contract implementation.\\n  */\\n  function computeHolderAddressManyToOne(bytes32 implementationID) external view returns (address);\\n}\",\"keccak256\":\"0x295c8de75990982be6925efe81812fe42f282730c9e2719771af6131bb830578\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x436755b75438baab8bab2cd1147a6f8cb6232bd0d04b7248f339869d5fcf4ce5\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyManagerAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IProxyManagerAccessControl {\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function transferManagerOwnership(address newOwner) external;\\n\\n  function transferOwnership(address newOwner) external;\\n\\n  function setImplementationAddressManyToOne(\\n    bytes32 implementationID,\\n    address implementation\\n  ) external;\\n\\n  function setImplementationAddressOneToOne(\\n    address proxyAddress,\\n    address implementation\\n  ) external;\\n}\",\"keccak256\":\"0xd4174a5b0f82e41531a551784c2d8dffd782ef716f843998069b232bd20b91d0\",\"license\":\"MIT\"},\"contracts/interfaces/IRootChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IRootChainManager {\\n  event TokenMapped(address indexed rootToken, address indexed childToken, bytes32 indexed tokenType);\\n\\n  event PredicateRegistered(bytes32 indexed tokenType, address indexed predicateAddress);\\n\\n  function registerPredicate(bytes32 tokenType, address predicateAddress) external;\\n\\n  function mapToken(\\n    address rootToken,\\n    address childToken,\\n    bytes32 tokenType\\n  ) external;\\n\\n  function cleanMapToken(address rootToken, address childToken) external;\\n\\n  function remapToken(\\n    address rootToken,\\n    address childToken,\\n    bytes32 tokenType\\n  ) external;\\n\\n  function depositEtherFor(address user) external payable;\\n\\n  function depositFor(\\n    address user,\\n    address rootToken,\\n    bytes calldata depositData\\n  ) external;\\n\\n  function exit(bytes calldata inputData) external;\\n}\\n\",\"keccak256\":\"0xad4cabb57076643f36691849cf7b5b7366a0e5930f9a5ffba65570b721b6ce49\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/lib/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash cfedb1f55864dcf8cc0831fdd8ec18eb045b7fd1.\\n\\nSubject to the MIT license\\n*************************************************************************************************/\\n\\n\\nlibrary TransferHelper {\\n  function safeApproveMax(address token, address to) internal {\\n    safeApprove(token, to, type(uint256).max);\\n  }\\n\\n  function safeUnapprove(address token, address to) internal {\\n    safeApprove(token, to, 0);\\n  }\\n\\n  function safeApprove(address token, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:SA\\\");\\n  }\\n\\n  function safeTransfer(address token, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:ST\\\");\\n  }\\n\\n  function safeTransferFrom(address token, address from, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:STF\\\");\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(\\\"\\\");\\n    require(success, \\\"TH:STE\\\");\\n  }\\n}\",\"keccak256\":\"0xa71688f6691750ccf58139119f14e43efa269dcfcd77161515c137c15c942083\",\"license\":\"MIT\"},\"contracts/lib/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.0;\\n\\n/* ========== External Interfaces ========== */\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\n/* ========== External Libraries ========== */\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash 87edfdcaf49ccc52591502993db4c8c08ea9eec0.\\n\\nSubject to the GPL-3.0 license\\n*************************************************************************************************/\\n\\n\\nlibrary UniswapV2Library {\\n  using SafeMath for uint256;\\n\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  function calculatePair(\\n    address factory,\\n    address token0,\\n    address token1\\n  ) internal pure returns (address pair) {\\n    pair = address(\\n      uint256(\\n        keccak256(\\n          abi.encodePacked(\\n            hex\\\"ff\\\",\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = calculatePair(factory, token0, token1);\\n  }\\n\\n  function getCumulativePriceLast(\\n    address factory,\\n    address tokenIn,\\n    address tokenOut\\n  ) internal view returns (uint256) {\\n    (address token0, address token1) = sortTokens(tokenIn, tokenOut);\\n    IUniswapV2Pair pair = IUniswapV2Pair(\\n      calculatePair(factory, token0, token1)\\n    );\\n    if (token0 == tokenIn) return pair.price0CumulativeLast();\\n    return pair.price1CumulativeLast();\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n      pairFor(factory, tokenA, tokenB)\\n    )\\n      .getReserves();\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (uint256 amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = amountA.mul(reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 amountInWithFee = amountIn.mul(997);\\n    uint256 numerator = amountInWithFee.mul(reserveOut);\\n    uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256 amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n    uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n    amountIn = (numerator / denominator).add(1);\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint256 amountIn,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint256 i; i < path.length - 1; i++) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i],\\n        path[i + 1]\\n      );\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint256 amountOut,\\n    address[] memory path\\n  ) internal view returns (uint256[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint256[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint256 i = path.length - 1; i > 0; i--) {\\n      (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n        factory,\\n        path[i - 1],\\n        path[i]\\n      );\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc251fd690d4eca4b8808991b52bb2c2b68b74c97a74238d14236d4ec9b8cc769\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001e5b38038062001e5b833981810160405260a08110156200003857600080fd5b508051602082015160408301516060808501516080909501516001600160601b031985831b81166101205284831b81166101405283831b811660c0529186901b9091166101005292939192909190620000b17f7ca83b20f9ebcf7361e9aa92ccaf4288e58f283ef8643d48af11fb81be1fc9e4620000dc565b6001600160601b0319606091821b811660e05230821b60a05291901b1660805250620002cc92505050565b60008073d23dedc599bd56767e42d48484d6ca96ab01c1156001600160a01b031663d083bc86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156200013857600080fd5b505afa1580156200014d573d6000803e3d6000fd5b505050506040513d60208110156200016457600080fd5b505160405190915060009081906001600160a01b0384169082818181855afa9150503d8060008114620001b4576040519150601f19603f3d011682016040523d82523d6000602084013e620001b9565b606091505b50915091508181906200024d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000211578181015183820152602001620001f7565b50505050905090810190601f1680156200023f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508080602001905160208110156200026457600080fd5b505193506001600160a01b038416620002c4576040805162461bcd60e51b815260206004820152601760248201527f4552525f4e554c4c5f494d504c454d454e544154494f4e000000000000000000604482015290519081900360640190fd5b505050919050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c611af96200036260003980610e32525080610d855250806104ba52806106c35280610cd8525080610c1f525080610b66525080610167528061034152806103c452806104f352806106f1528061079f5250806113265280611442528061155f5250611af96000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063976eb2681161005b578063976eb26814610121578063a9059cbb14610129578063df7b6a1814610155578063fa9143121461015d57610088565b80630b56dd631461008d57806323b872dd146100975780635fb4ed2a146100e157806370a08231146100e9575b600080fd5b610095610165565b005b6100cd600480360360608110156100ad57600080fd5b506001600160a01b038135811691602081013590911690604001356102c4565b604080519115158252519081900360200190f35b6100956103c2565b61010f600480360360208110156100ff57600080fd5b50356001600160a01b0316610478565b60408051918252519081900360200190f35b6100956104f1565b6100cd6004803603604081101561013f57600080fd5b506001600160a01b038135169060200135610672565b6100956106ef565b610095610788565b7f000000000000000000000000000000000000000000000000000000000000000073fa6de2697d59e88ed7fc4dfe5a33dac43565ea41336001600160a01b0383161480156101bb5750306001600160a01b038216145b6101c457600080fd5b6101e1736b3595068778dd592e39a122f4f5a5cf09c90fe2610f39565b6101fe731f9840a85d5af5bf1d1762f925bdaddc4201f984610f39565b61021b737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9610f39565b61023873d533a949740bb3306d119cc777fa900ba034cd52610f39565b61025573c00e94cb662c3520282e6f5717214004a7f26888610f39565b610272739f8f72aa9304c8b593d555f12ef6589cc3a579a2610f39565b61028f73c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f610f39565b6102ac73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610fdf565b7378a3ef33cf033381feb43ba4212f2af5a5a0a2ea80ff5b60003073fa6de2697d59e88ed7fc4dfe5a33dac43565ea4114806102fb5750307317ac188e09a7890a1844e5e65471fe8b0ccfadf3145b8061031957503073abafa52d3d5a2c18a4c1ae24480d22b831fc0413145b80156103385750337340ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf145b801561037557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b801561039d57506001600160a01b0383167340ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf145b80156103af57506001600160801b0382145b6103b857600080fd5b5060019392505050565b7f000000000000000000000000000000000000000000000000000000000000000073abafa52d3d5a2c18a4c1ae24480d22b831fc0413336001600160a01b0383161480156104185750306001600160a01b038216145b61042157600080fd5b61043e73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610f39565b61045b732260fac5e5542a773aa44fbcfedf7c193bc2c599610f39565b61028f73126c121f99e1e211df2e5f8de2d96fa36647c855610f39565b60003373abafa52d3d5a2c18a4c1ae24480d22b831fc04131480156104b057503073126c121f99e1e211df2e5f8de2d96fa36647c855145b156104de576104de7f000000000000000000000000000000000000000000000000000000000000000061124b565b60006104e98361126f565b549392505050565b7f00000000000000000000000000000000000000000000000000000000000000007317ac188e09a7890a1844e5e65471fe8b0ccfadf3336001600160a01b0383161480156105475750306001600160a01b038216145b61055057600080fd5b61056d73d26114cd6ee289accf82350c8d8487fedb8a0c07610f39565b61058a7304fa0d235c4abf4bcf4787af4cf447de572ef828610f39565b6105a7730d8775f648430679a709e98d2b0cb6250d2887ef610f39565b6105c473c00e94cb662c3520282e6f5717214004a7f26888610f39565b6105e1736b3595068778dd592e39a122f4f5a5cf09c90fe2610f39565b6105fe73d533a949740bb3306d119cc777fa900ba034cd52610f39565b61061b739f8f72aa9304c8b593d555f12ef6589cc3a579a2610f39565b61063873c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f610f39565b610655730bc529c00c6401aef6d220be8c6ea1667f6ad93e610f39565b61028f731f9840a85d5af5bf1d1762f925bdaddc4201f984610f39565b600073abafa52d3d5a2c18a4c1ae24480d22b831fc041373126c121f99e1e211df2e5f8de2d96fa36647c85533821480156106b55750306001600160a01b038216145b6106be57600080fd5b6106e77f000000000000000000000000000000000000000000000000000000000000000061124b565b505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073e487f6e45d292bf8d9b883d007d93714f4bfe148336001600160a01b0383161480156107455750306001600160a01b038216145b61074e57600080fd5b61076b73d26114cd6ee289accf82350c8d8487fedb8a0c07610f39565b6102ac73e41d2489571d322189246dafa5ebde1f4699f498610f39565b7378a3ef33cf033381feb43ba4212f2af5a5a0a2ea7f000000000000000000000000000000000000000000000000000000000000000033821480156107d55750306001600160a01b038216145b6107de57600080fd5b6040805163c3242d6b60e01b81527fe4105e36f4402bad908f77146a54b96b1aae362be2a9d940c0e19537431e1efb60048201523060248201529051733d4860d4b7952a3cad3accfada61463f15fc0d549163c3242d6b91604480830192600092919082900301818387803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b50506040805163c3242d6b60e01b81527f7ca83b20f9ebcf7361e9aa92ccaf4288e58f283ef8643d48af11fb81be1fc9e460048201523060248201529051733d4860d4b7952a3cad3accfada61463f15fc0d54935063c3242d6b9250604480830192600092919082900301818387803b1580156108e657600080fd5b505af11580156108fa573d6000803e3d6000fd5b50506040805163c3242d6b60e01b81527f42fdd905bf1f3fac3b475cdca7cc127db3a757ae179f57c9da3b4787f5f5820660048201523060248201529051733d4860d4b7952a3cad3accfada61463f15fc0d54935063c3242d6b9250604480830192600092919082900301818387803b15801561097657600080fd5b505af115801561098a573d6000803e3d6000fd5b505050506109966112f4565b73abafa52d3d5a2c18a4c1ae24480d22b831fc04136001600160a01b0316635fb4ed2a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109e557600080fd5b505af11580156109f9573d6000803e3d6000fd5b5050505073fa6de2697d59e88ed7fc4dfe5a33dac43565ea416001600160a01b0316630b56dd636040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a4c57600080fd5b505af1158015610a60573d6000803e3d6000fd5b505050507317ac188e09a7890a1844e5e65471fe8b0ccfadf36001600160a01b031663976eb2686040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b5050505073e487f6e45d292bf8d9b883d007d93714f4bfe1486001600160a01b031663df7b6a186040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b1a57600080fd5b505af1158015610b2e573d6000803e3d6000fd5b50506040805163c3242d6b60e01b81527fe4105e36f4402bad908f77146a54b96b1aae362be2a9d940c0e19537431e1efb60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660248201529051733d4860d4b7952a3cad3accfada61463f15fc0d54935063c3242d6b9250604480830192600092919082900301818387803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b50506040805163c3242d6b60e01b81527f7ca83b20f9ebcf7361e9aa92ccaf4288e58f283ef8643d48af11fb81be1fc9e460048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660248201529051733d4860d4b7952a3cad3accfada61463f15fc0d54935063c3242d6b9250604480830192600092919082900301818387803b158015610c8c57600080fd5b505af1158015610ca0573d6000803e3d6000fd5b50506040805163c3242d6b60e01b81527f42fdd905bf1f3fac3b475cdca7cc127db3a757ae179f57c9da3b4787f5f5820660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660248201529051733d4860d4b7952a3cad3accfada61463f15fc0d54935063c3242d6b9250604480830192600092919082900301818387803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b505060408051633409d1e160e11b815273f00a38376c8668fc1f3cd3daeef42e0e44a7fcdb60048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660248201529051733d4860d4b7952a3cad3accfada61463f15fc0d549350636813a3c29250604480830192600092919082900301818387803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505060408051633409d1e160e11b8152735b470a8c134d397466a1a603678dadda678cbc2960048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660248201529051733d4860d4b7952a3cad3accfada61463f15fc0d549350636813a3c29250604480830192600092919082900301818387803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b50506040805163f2fde38b60e01b81527378a3ef33cf033381feb43ba4212f2af5a5a0a2ea60048201529051733d4860d4b7952a3cad3accfada61463f15fc0d54935063f2fde38b9250602480830192600092919082900301818387803b158015610f1d57600080fd5b505af1158015610f31573d6000803e3d6000fd5b505050505050565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f8857600080fd5b505afa158015610f9c573d6000803e3d6000fd5b505050506040513d6020811015610fb257600080fd5b505190508015610fdb57610fdb827378a3ef33cf033381feb43ba4212f2af5a5a0a2ea83611672565b5050565b6000806001600160a01b0383163010610ff9578230610ffc565b30835b91509150600061100c83836117bc565b90506000846001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561105d57600080fd5b505afa158015611071573d6000803e3d6000fd5b505050506040513d602081101561108757600080fd5b50519050611096826001611873565b816001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b5050505060006110fa60018303600184611886565b90506111098382600101611873565b6001600160a01b0385163014156111af576040805163022c0d9f60e01b8152600060048201819052600019850160248301527378a3ef33cf033381feb43ba4212f2af5a5a0a2ea6044830152608060648301526084820181905291516001600160a01b0386169263022c0d9f9260a4808201939182900301818387803b15801561119257600080fd5b505af11580156111a6573d6000803e3d6000fd5b50505050611240565b6040805163022c0d9f60e01b8152600019840160048201526000602482018190527378a3ef33cf033381feb43ba4212f2af5a5a0a2ea6044830152608060648301526084820181905291516001600160a01b0386169263022c0d9f9260a4808201939182900301818387803b15801561122757600080fd5b505af115801561123b573d6000803e3d6000fd5b505050505b610f31836000611873565b3660008037600080366000845af43d6000803e80801561126a573d6000f35b3d6000fd5b6040805160609290921b6bffffffffffffffffffffffff1916602080840191909152815160148185030181526034840183528051908201207f7ecfa00ab6c63697e0ad4f12c3e8a92315c100823a479cf3ff044af6e0c65a65605485015260748085019190915282518085039091018152609490930190915281519101206000190190565b604080516001600160801b036020808301919091528251808303820181528284019384905263e3dec8fb60e01b9093527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381166044840190815273fa6de2697d59e88ed7fc4dfe5a33dac43565ea4160648501819052606060848601908152865160a4870152865173a0c68c638235ee32657e8f720a23cec1bfc77c779663e3dec8fb969394899490939260c4909201919085019080838360005b838110156113cf5781810151838201526020016113b7565b50505050905090810190601f1680156113fc5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561141d57600080fd5b505af1158015611431573d6000803e3d6000fd5b505060405163e3dec8fb60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038116600483019081527317ac188e09a7890a1844e5e65471fe8b0ccfadf36024840181905260606044850190815287516064860152875173a0c68c638235ee32657e8f720a23cec1bfc77c77975063e3dec8fb96509394919388939260840190602085019080838360005b838110156114ec5781810151838201526020016114d4565b50505050905090810190601f1680156115195780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b505060405163e3dec8fb60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381166004830190815273abafa52d3d5a2c18a4c1ae24480d22b831fc04136024840181905260606044850190815287516064860152875173a0c68c638235ee32657e8f720a23cec1bfc77c77975063e3dec8fb96509394919388939260840190602085019080838360005b838110156116095781810151838201526020016115f1565b50505050905090810190601f1680156116365780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561165757600080fd5b505af115801561166b573d6000803e3d6000fd5b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b602083106116ee5780518252601f1990920191602091820191016116cf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611750576040519150601f19603f3d011682016040523d82523d6000602084013e611755565b606091505b5091509150818015611783575080511580611783575080806020019051602081101561178057600080fd5b50515b61166b576040805162461bcd60e51b815260206004820152600560248201526415120e94d560da1b604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff19606094851b81166020808401919091529390941b9093166034840152805160288185030181526048840182528051908301206001600160f81b03196068850152735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f60601b6069850152607d8401527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808501919091528151808503909101815260bd9093019052815191012090565b600061187e8361126f565b919091555050565b60008084116118c65760405162461bcd60e51b815260040180806020018281038252602c815260200180611a78602c913960400191505060405180910390fd5b6000831180156118d65750600082115b6119115760405162461bcd60e51b8152600401808060200182810382526028815260200180611aa46028913960400191505060405180910390fd5b60006119296103e8611923868861195e565b9061195e565b9050600061193d6103e561192386896119c0565b9050611954600182848161194d57fe5b0490611a1d565b9695505050505050565b60008261196d575060006119ba565b8282028284828161197a57fe5b04146119b75760405162461bcd60e51b8152600401808060200182810382526021815260200180611acc6021913960400191505060405180910390fd5b90505b92915050565b600082821115611a17576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156119b7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000706000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "If the sender is FFF and the receiver is DEGEN, delegate to the real sigma pool implementation to read the balance; otherwise, return the value stored at the balance slot for `account`."
      },
      "cc10()": {
        "details": "Transfer the assets in CC10 and its Uniswap pair's WETH to the treasury."
      },
      "cc10Seller()": {
        "details": "Transfer the assets in the CC10 token seller to the treasury."
      },
      "defi5()": {
        "details": "Transfer the assets in DEFI5 and its Uniswap pair's WETH to the treasury."
      },
      "fff()": {
        "details": "Transfer the assets in FFF and its Uniswap pair's WETH to the treasury."
      },
      "transfer(address,uint256)": {
        "details": "Enable transfers when the sender is FFF and the receiver is DEGEN. This allows DEGEN to be removed from FFF even while the implementation contract for Sigma pools is set to the recovery contract."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Enables fake deposits to Polygon. Accepts the transferFrom call only if the current contract is DEFI5, CC10 or FFF, the caller is the polygon erc20 predicate, the sender is the recovery contract, the receiver is the polygon erc20 predicate and the amount is 2**128-1."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}